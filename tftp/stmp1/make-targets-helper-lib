# this file is used by make-image-targets
# do not try to run it on its own
# use: make-image-targets dir
# where dir is the directory this file is in

# defaults
ROOTFS_FILE=you_must_define_one.tar.gz
MODULES_KEEP=false
BOARD=stmp1

my-tty() {
    # ensure our tty is enabled
    add-tty ttySTM0
}

# remove any existing modules
rm-modules() {
    rm -rf xxx-temp/lib/modules
}

# trim the modules
trim-modules() {
    echo "Before:"; du -sh xxx-temp/lib/modules/*

#    rm -rf xxx-temp/lib/modules/*/kernel/drivers/gpu
#    rm -rf xxx-temp/lib/modules/*/kernel/drivers/media
#    rm -rf xxx-temp/lib/modules/*/kernel/sound

    echo "After:"; du -sh xxx-temp/lib/modules/*
}

# Yocto deploy of modules-*.tgz are not stripped
strip-modules() {
    echo "Before:"; du -sh xxx-temp/lib/modules/*
    find xxx-temp/lib/modules/*/kernel -name "*.ko" | xargs -n 1 aarch64-linux-gnu-strip --strip-debug
    echo "After:"; du -sh xxx-temp/lib/modules/*
}

cond-depmod() {
    for m in xxx-temp/lib/modules/*; do
        if [ ! -r $m/modules.alias ]; then
            KVER=$(basename $m)
            SMAP_FILE=xxx-temp/boot/System.map-$KVER
            MOD_SYMVERS_FILE=xxx-temp/boot/Module.symvers-$KVER
            if [ -r $SMAP_FILE -a -r $MOD_SYMVERS_FILE ]; then
                depmod -ae -b xxx-temp -F $SMAP_FILE -E $MOD_SYMVERS_FILE $KVER && \
                echo "depmod done for $KVER"
            else
                echo "ERROR: depmod needed for $KVER but support files not found"
                ls -l xxx-temp/boot
            fi

        fi
    done
}

# To get the files needed for depmod we install other things, remove them now
rm-non-modules() {
    rm -rf xxx-temp/boot
    rm -rf xxx-temp/var
}

add-init-symlink() {
    ln -fs /sbin/init xxx-temp/init
}

usr-merge() {
    mkdir -p xxx-temp/usr

    for d in bin sbin lib; do
        if [ ! -h xxx-temp/$d -a -d xxx-temp/$d ]; then
            if [ -d xxx-temp/usr/$d ]; then
                mv xxx-temp/$d/* xxx-temp/usr/$d
                rm -rf xxx-temp/$d
            else
                mv xxx-temp/$d xxx-temp/usr/$d
            fi
            ln -s usr/$d xxx-temp/$d
       fi
    done
}

libmain() {
    shopt -s nullglob

    D=generated
    DF=../firmware/usr/lib/firmware
    mkdir -p $D
    mkdir -p $DF

    if $MODULES_KEEP; then
        CB_RM_MODULES=""
        MODULES_CPIO=""
    else
        CB_RM_MODULES=cb:rm-modules
        MODULES_CPIO=$D/modules.cpio.gz
    fi

    # hack the initrd
    new-cpio $D/hacked.cpio.gz \
        $ROOTFS_FILE \
        cb:add-init-symlink cb:my-tty $CB_RM_MODULES cb:usr-merge

    # make a cpio of the firmware
    new-cpio $D/firmware.cpio.gz ../firmware cb:usr-merge

    # make a cpio of the modules
    if ! $MODULES_KEEP; then
        new-cpio $D/modules.cpio.gz modules-*.tar.gz modules-*.tgz kernel-dev*.{rpm,ipk,dev} \
            cb:trim-modules cb:strip-modules cb:cond-depmod cb:rm-non-modules cb:usr-merge
    fi

    # add any extra stuff
    new-cpio $D/my-extra-stuff.cpio.gz ../my-extra-stuff

    # cpio-cat OUTPUT INPUT INPUT ...
    cpio-cat initrd.cpio.gz $D/hacked.cpio.gz \
        $D/firmware.cpio.gz $MODULES_CPIO \
        $D/my-extra-stuff.cpio.gz
}

# have a default main but make it easy to override to add pre and post operations
main() {
    libmain "$@"
}